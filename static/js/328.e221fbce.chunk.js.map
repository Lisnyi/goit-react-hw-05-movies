{"version":3,"file":"static/js/328.e221fbce.chunk.js","mappings":"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","sources":["pages/Cast/Cast.styled.js","pages/Cast/Cast.jsx","shared/API/API.js","shared/components/MoviesList/MoviesList.styled.js","shared/components/MoviesList/MoviesList.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const CastList = styled.ul`\n    list-style: none;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    li {\n        align-items: center;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n\n    img {\n        width: 100px;\n    }\n`","import { useParams } from \"react-router-dom\"\nimport { useState, useEffect } from \"react\"\nimport { API } from \"shared\"\nimport noposter from '../../images/noposter.jpg'\nimport { CastList } from \"./Cast.styled\"\n\n\nconst { getMovieCredits } = API\n\nexport default function Cast() {\n    const [movieCast, setMovieCast] = useState([])\n    const [loader, setLoader] = useState(false)\n    const [error, setError] = useState(null)\n\n    const { movieId } = useParams()\n    const isCast = Boolean(movieCast.length)\n\n    useEffect(() => {\n        async function fetchMovieCast () {\n            try {\n                setLoader(true)\n                setError(null)\n                setMovieCast([])\n                const data = await getMovieCredits(movieId)\n                setMovieCast(data.data.cast)\n                return\n              } catch (e) {\n                setMovieCast([])\n                setError('Whoops something went wrong')\n              } finally {\n                setLoader(false)\n              }\n        }\n\n        fetchMovieCast()\n    },[movieId])\n\n    return (\n        <>\n            {loader && <p>Loading...</p>}\n            {error && <p>{error}</p>}\n            {isCast &&   <CastList>\n                            {movieCast.map(({character, original_name, profile_path, credit_id}) => <li key={credit_id\n}>\n                                <img src={profile_path ? `https://image.tmdb.org/t/p/w200${profile_path}` : noposter} alt={original_name} />\n                                <p>{original_name}</p>\n                                <p>Character: {character}</p>\n                            </li>)}\n                        </CastList>}\n        </>\n    )\n}\n","import axios from \"axios\"\n\nconst KEY = '2acc48bc8101b89794229029120e4b70'\nconst BASE_URL = 'https://api.themoviedb.org/3/'\n\nasync function getTrendingMovies (page=1) {\n    const response = await axios.get(`${BASE_URL}trending/movie/day?api_key=${KEY}&page=${page}`)\n    return response\n}\n\nasync function getMovieByKeyword (keyword, page=1) {\n    const response = await axios.get(`${BASE_URL}search/movie?api_key=${KEY}&query=${keyword}&page=${page}`)\n    return response\n}\n\nasync function getMovieDetails (movie_id) {\n    const response = await axios.get(`${BASE_URL}movie/${movie_id}?api_key=${KEY}`)\n\n    return response\n}\n\nasync function getMovieCredits (movie_id) {\n    const response = await axios.get(`${BASE_URL}movie/${movie_id}/credits?api_key=${KEY}`)\n    return response\n}\n\nasync function getMovieReviews (movie_id) {\n    const response = await axios.get(`${BASE_URL}movie/${movie_id}/reviews?api_key=${KEY}`)\n    return response\n}\n\nconst API = {\n    getTrendingMovies,\n    getMovieByKeyword,\n    getMovieDetails,\n    getMovieCredits,\n    getMovieReviews\n}\n\nexport default API","import styled from \"styled-components\";\n\nconst ListOfMovies = styled.ul`\n    display: flex;\n    flex-direction: column;\n    margin: 0;\n\n    li {\n        margin-bottom: 4px;\n\n        &:last-child{\n            margin-bottom: 0;\n        }\n    }\n`\n\nexport default ListOfMovies","import { Link, useLocation } from \"react-router-dom\"\nimport PropTypes from 'prop-types'\nimport ListOfMovies from \"./MoviesList.styled\"\n\nexport default function MoviesList({moviesList}) {\n  const location = useLocation()\n  return (\n    <ListOfMovies>\n        {moviesList.map(({id, original_title}) =>\n            (<li key={id}>\n                <Link state={{from: location}} to={`/movies/${id}`} >{original_title}</Link>\n            </li>))}\n    </ListOfMovies>\n  )\n}\n\nMoviesList.propTypes = {\n  moviesList: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    original_title: PropTypes.string.isRequired\n  }))\n}\n"],"names":["CastList","styled","getMovieCredits","API","Cast","useState","movieCast","setMovieCast","loader","setLoader","error","setError","movieId","useParams","isCast","Boolean","length","useEffect","data","cast","fetchMovieCast","map","character","original_name","profile_path","credit_id","src","noposter","alt","KEY","BASE_URL","getTrendingMovies","page","axios","response","getMovieByKeyword","keyword","getMovieDetails","movie_id","getMovieReviews","MoviesList","moviesList","location","useLocation","id","original_title","state","from","to"],"sourceRoot":""}